name: "ECR-EC2-Deployment"

on:
  workflow_dispatch: 

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Public ECR is always in us-east-1

      - name: Authenticate Docker to Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker image
        run: docker build -t dockerhubimages .

      - name: Tag Docker image
        run: docker tag dockerhubimages:latest public.ecr.aws/n5x0z5m1/dockerhubimages:latest

      - name: Push Docker image to Public ECR
        run: docker push public.ecr.aws/n5x0z5m1/dockerhubimages:latest

      # 5. SSH into EC2 and update container
      # - name: SSH to EC2 and deploy new container
      #   uses: appleboy/ssh-action@v1.2.0
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/dockerhubimage:latest
      #       docker stop my-container || true
      #       docker rm my-container || true
      #       docker rmi $IMAGE_URI || true
      #       aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
      #       docker pull $IMAGE_URI
      #       docker run -d -p 80:3000 --name my-container $IMAGE_URI
