name: "ECR-EC2-Deployment"

on:
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build, tag, and push image to ECR
      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/dockerhubimage:latest
          docker build -t public.ecr.aws/n5x0z5m1/dockerhubimages .
          docker push public.ecr.aws/n5x0z5m1/dockerhubimages

      # 5. SSH into EC2 and update container
      # - name: SSH to EC2 and deploy new container
      #   uses: appleboy/ssh-action@v1.2.0
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     script: |
      #       IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/dockerhubimage:latest
      #       docker stop my-container || true
      #       docker rm my-container || true
      #       docker rmi $IMAGE_URI || true
      #       aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
      #       docker pull $IMAGE_URI
      #       docker run -d -p 80:3000 --name my-container $IMAGE_URI
